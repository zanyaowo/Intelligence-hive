# docker/docker-compose.all.yml
# 整合所有服務（蜜罐 + 分析）

networks:
  snare_tanner_network:
  analytics_network:

services:

  # ==================== 蜜罐服務 ====================

  snare:
    build:
      context: ../honeypot_configs/snare_tanner/snare
      args:
        PAGE_URL: www.saucedemo.com
    container_name: snare_honeypot
    restart: always
    stop_signal: SIGKILL
    tty: true
    networks:
     - snare_tanner_network
    ports:
     - "80:80"
    image: snare_honeypot_local
    environment:
      - TANNER=tanner
    depends_on:
      tanner:
        condition: service_healthy

  tanner_redis:
    build: ../honeypot_configs/snare_tanner/tanner/docker/redis
    container_name: tanner_redis
    restart: always
    stop_signal: SIGKILL
    tty: true
    networks:
     - snare_tanner_network
    image: tanner_redis_local
    tmpfs:
     - /data:uid=999,gid=999
    read_only: true

  tanner_phpox:
    build: ../honeypot_configs/snare_tanner/tanner/docker/phpox
    container_name: tanner_phpox
    restart: always
    stop_signal: SIGKILL
    tty: true
    networks:
     - snare_tanner_network
    image: tanner_phpox_local
    read_only: true
    tmpfs: "/tmp"

  tanner_api:
    build:
      context: ../honeypot_configs/snare_tanner/tanner
      dockerfile: docker/tanner/Dockerfile
    environment:
      - PATH=/opt/tanner/tanner-env/bin/:$PATH
    container_name: tanner_api
    restart: always
    stop_signal: SIGKILL
    tmpfs:
     - /tmp/tanner:uid=65534,gid=65534
     - /var/log/tanner:uid=65534,gid=65534
    tty: true
    networks:
     - snare_tanner_network
    image: tanner_api_local
    ports:
     - "8081:8092"
    read_only: true
    command: tannerapi
    depends_on:
     - tanner_redis

  tanner_web:
    build:
      context: ../honeypot_configs/snare_tanner/tanner
      dockerfile: docker/tanner/Dockerfile
    environment:
      - PATH=/opt/tanner/tanner-env/bin/:$PATH
    container_name: tanner_web
    restart: always
    stop_signal: SIGKILL
    tmpfs:
     - /tmp/tanner:uid=65534,gid=65534
     - /var/log/tanner:uid=65534,gid=65534
    tty: true
    networks:
     - snare_tanner_network
    ports:
     - "8091:8091"
    image: tanner_web_local
    command: tannerweb
    read_only: true
    depends_on:
     - tanner_redis

  tanner:
    build:
      context: ../honeypot_configs/snare_tanner/tanner
      dockerfile: docker/tanner/Dockerfile
    environment:
      - PATH=/opt/tanner/tanner-env/bin/:$PATH
    container_name: tanner_service
    restart: always
    stop_signal: SIGKILL
    tmpfs:
     - /tmp/tanner:uid=65534,gid=65534
     - /var/log/tanner:uid=65534,gid=65534
     - /opt/tanner/files:uid=65534,gid=65534
    tty: true
    networks:
     - snare_tanner_network
    ports:
     - "8090:8090"
    image: tanner_local
    command: tanner
    read_only: true
    depends_on:
     - tanner_api
     - tanner_web
     - tanner_phpox
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://tanner:8090/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==================== 數據處理服務 ====================

  ingestion_api:
    build: ../services/ingestion_api
    container_name: ingestion_api
    restart: always
    networks:
     - snare_tanner_network
     - analytics_network
    ports:
     - "8082:8000"
    environment:
      - REDIS_HOST=analytics_redis
      - REDIS_PORT=6379
      - REDIS_QUEUE=sessions_queue
    env_file:
      - ../services/ingestion_api/.env
    read_only: true
    tmpfs:
     - /tmp
    depends_on:
      analytics_redis:
        condition: service_healthy

  analytics_redis:
    image: redis:7-alpine
    container_name: analytics_redis
    restart: always
    networks:
      - analytics_network
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - analytics_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  analytics_worker:
    build: ../services/analytics_worker
    container_name: analytics_worker
    restart: always
    networks:
      - analytics_network
    environment:
      - REDIS_HOST=analytics_redis
      - REDIS_PORT=6379
      - REDIS_QUEUE=sessions_queue
    depends_on:
      analytics_redis:
        condition: service_healthy

volumes:
  redis_data:
  tanner_logs:
  analytics_redis_data:
